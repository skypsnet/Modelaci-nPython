library("gstat")
xy <- expand.grid(1:5, 1:5)
b=10
h=10
x=matrix(0,1,40)
y=matrix(0,1,20)
yy=matrix(0,1,400)
# Ciclo que obtiene la coordenada x de los centroides
contx=1
for(i in 1:20){
 for(j in 1:2){
  if (contx%%2==0) 
 { 
  x[contx]<-((2*b)/3)+b*(i-1)
 }
  else 
 {
  x[contx]<-(b/3)+b*(i-1)
 }
 contx=contx+1
}
}
# Ciclo que obtiene la coordenada y de los centroides
conty=1
for(m in 1:10){
 for(n in 1:2){
  if (conty%%2==0) 
 { 
  y[conty]<-((h)/3)+h*(m-1)
 }
  else 
 {
  y[conty]<-(2*h/3)+h*(m-1)
 }
 conty=conty+1
}
}
# Se crea el vector de coordenadas x por elemento
xx=c(x,x,x,x,x,x,x,x,x,x)
# Se crea el vector de coordenadas y por elemento
contyy=1
aux=1
for(i in 1:10){
 for(j in 1:40){
  if(contyy%%2==0){
   yy[contyy]<-y[aux+1]}
  else{
   yy[contyy]<-y[aux]}
  contyy=contyy+1}
 aux=aux+2}
yy=as.vector(yy)
# Se crea un data frame para los centroides
xy=data.frame(xx,yy)
names(xy) <- c("x","y")
# Se realizan las simulaciones no condicionales
vgm1=vgm(1,"Exp",15)
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Pruebayy.csv")
vgm1
plot(vgm1)
vgm1
plot(vgm1)
model = vgm(0.6, "Sph", 1000, nugget = 0.06)
plot(vario, model) 
plot(model) 
library(gstat)
library(sp)
data(meuse)
coordinates(meuse) = ~x+y
# variogram plot ----------------------------------------------------------
vario = variogram(log(zinc)~1, meuse)
plot(vario)
model = vgm(0.6, "Sph", 1000, nugget = 0.06)
plot(vario, model)
plot(model, sill = 0.7, cutoff = 1600)
model = vgm(0.6, "Sph", 1000, nugget = 0.06)
plot(model, cutoff = 1600)
library(gstat)
plot.variogramModel = function(x, ..., cutoff, type = 'l') {
  if (missing(cutoff))
    stop("parameter cutoff needs to be specified")
  plot(variogramLine(x, cutoff, ...), type = type)
}
model = vgm(0.6, "Sph", 1000, nugget = 0.06)
plot(model, cutoff = 1600)
vgm1=vgm(1,"Exp",15)
plot(model, cutoff=1600)
model2 = vgm(0.6, "Sph", 1000, nugget = 0.06, anis = c(45, 0.4))
plot(model2, cutoff = 1600)
> plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2),.5* sqrt(2),0))
> plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2),.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2),.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2),.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(.5 *sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(*sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), -.5* sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), -.sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(2),))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(2),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(90),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(1000),0))
plot(model2, cutoff = 1600, dir = c(sqrt(2), sqrt(1),0))
plot(model2, cutoff = 1600, dir = c(sqrt(100), sqrt(1),0))
plot(model2, cutoff = 1600, dir = c(sqrt(900), sqrt(1),0))
plot(model2, cutoff = 1600, dir = c(sqrt(900), sqrt(9000),0))
plot(model2, cutoff = 1600, dir = c(sqrt(900), sqrt(9000),90))
plot(model2, cutoff = 1600, dir = c(sqrt(900), sqrt(9),90))
plot(model2, cutoff = 1600, dir = c(sqrt(9), sqrt(9),90))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(9),90))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(9),90)
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(9),90)9
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(9),90))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(9),90))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),90))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),1))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),-1))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),-100))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),-1))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),2))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),7))
plot(model2, cutoff = 1600, dir = c(0.45*sqrt(2),0.45* sqrt(2),1))
vgm1=vgm(1,"Exp",15)
plot(vgm1,cutoff=2000)
plot(vgm1,cutoff=500)
plot(vgm1,cutoff=100)
plot(vgm1,cutoff=10000)
plot(vgm1,cutoff=1)
plot(vgm1,cutoff=70)
plot(vgm1,cutoff=100)
plot(vgm1,cutoff=150)
plot(vgm1,cutoff=200)
vgm1=vgm(1,"Exp",150)
plot(vgm1,cutoff=200)
plot(vgm1,cutoff=500)
plot(vgm1,cutoff=2000)
model2 = vgm(0.6, "Sph", 1000, nugget = 0.06, anis = c(45, 0.4))
plot(model2, cutoff = 1600)
model2 = vgm(0.6, "Sph", 2000, nugget = 0.06, anis = c(45, 0.4))
plot(model2, cutoff = 1600)
model2 = vgm(0.6, "Sph", 12, nugget = 0)
plot(model2, cutoff = 1600)
plot(model2, cutoff = 5/)
plot(model2, cutoff = 100)
plot(model2, cutoff = 50)
plot(model2, cutoff = 40)
plot(model2, cutoff = 30)
plot(model2, cutoff = 20)
model2 = vgm(0.6, "ex*", 12, nugget = 0)
model2 = vgm(0.6, "exp", 12, nugget = 0)
model2 = vgm(0.6, "Exp", 12, nugget = 0)
plot(model2, cutoff = 20)
model2 = vgm(0.6, "Sph", 2000, nugget = 0.06, anis = c(45, 0.4))
plot(model2, cutoff=1600)
plot(model2, cutoff=1600)
model2 = vgm(0.6, "Sph", 2000, nugget = 0.06, anis = c(0, 0.5))
model2 = vgm(0.6, "Sph", 1000, nugget = 0.06, anis = c(45, 0.4))
plot(model2, cutoff=1600)
q()
library("gstat")
xy <- expand.grid(1:5, 1:5)
b=10
h=10
x=matrix(0,1,40)
y=matrix(0,1,20)
yy=matrix(0,1,400)
# Ciclo que obtiene la coordenada x de los centroides
contx=1
for(i in 1:20){
 for(j in 1:2){
  if (contx%%2==0) 
 { 
  x[contx]<-((2*b)/3)+b*(i-1)
 }
  else 
 {
  x[contx]<-(b/3)+b*(i-1)
 }
 contx=contx+1
}
}
# Ciclo que obtiene la coordenada y de los centroides
conty=1
for(m in 1:10){
 for(n in 1:2){
  if (conty%%2==0) 
 { 
  y[conty]<-((h)/3)+h*(m-1)
 }
  else 
 {
  y[conty]<-(2*h/3)+h*(m-1)
 }
 conty=conty+1
}
}
# Se crea el vector de coordenadas x por elemento
xx=c(x,x,x,x,x,x,x,x,x,x)
# Se crea el vector de coordenadas y por elemento
contyy=1
aux=1
for(i in 1:10){
 for(j in 1:40){
  if(contyy%%2==0){
   yy[contyy]<-y[aux+1]}
  else{
   yy[contyy]<-y[aux]}
  contyy=contyy+1}
 aux=aux+2}
yy=as.vector(yy)
# Se crea un data frame para los centroides
xy=data.frame(xx,yy)
names(xy) <- c("x","y")
# Se realizan las simulaciones no condicionales
vgm1=vgm(1,"Exp",15)
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Pruebayy.csv")
vgm1=vgm(1,"Exp",30,anis=c(90,0.3))
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Pruebayy.csv")
# Se crea un data frame para los centroides
xy=data.frame(xx,yy)
names(xy) <- c("x","y")
# Se realizan las simulaciones no condicionales
vgm1=vgm(1,"Exp",30,anis=c(90,0.3))
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Anisotropo.csv")
q
q()
# Script en R que a partir de la biblioteca gstat calcula los centroides de cada elemento finito y crea el conjunto de valores de
# simulacion no condicional y genera un conjunto de valores de carga
# hidraulica a partir de un variograma exponencial
library("gstat")
xy <- expand.grid(1:5, 1:5)
b=10
h=10
x=matrix(0,1,40)
y=matrix(0,1,20)
yy=matrix(0,1,400)
# Ciclo que obtiene la coordenada x de los centroides
contx=1
for(i in 1:20){
 for(j in 1:2){
  if (contx%%2==0) 
 { 
  x[contx]<-((2*b)/3)+b*(i-1)
 }
  else 
 {
  x[contx]<-(b/3)+b*(i-1)
 }
 contx=contx+1
}
}
# Ciclo que obtiene la coordenada y de los centroides
conty=1
for(m in 1:10){
 for(n in 1:2){
  if (conty%%2==0) 
 { 
  y[conty]<-((h)/3)+h*(m-1)
 }
  else 
 {
  y[conty]<-(2*h/3)+h*(m-1)
 }
 conty=conty+1
}
}
# Se crea el vector de coordenadas x por elemento
xx=c(x,x,x,x,x,x,x,x,x,x)
# Se crea el vector de coordenadas y por elemento
contyy=1
aux=1
for(i in 1:10){
 for(j in 1:40){
  if(contyy%%2==0){
   yy[contyy]<-y[aux+1]}
  else{
   yy[contyy]<-y[aux]}
  contyy=contyy+1}
 aux=aux+2}
yy=as.vector(yy)
# Se crea un data frame para los centroides
xy=data.frame(xx,yy)
names(xy) <- c("x","y")
# Se realizan las simulaciones no condicionales
vgm1=vgm(1,"Exp",30,anis=c(0,0.3))
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Anisotropo.csv")
q
q()
# Script en R que a partir de la biblioteca gstat calcula los centroides de cada elemento finito y crea el conjunto de valores de
# simulacion no condicional y genera un conjunto de valores de carga
# hidraulica a partir de un variograma exponencial
library("gstat")
xy <- expand.grid(1:5, 1:5)
b=10
h=10
x=matrix(0,1,40)
y=matrix(0,1,20)
yy=matrix(0,1,400)
# Ciclo que obtiene la coordenada x de los centroides
contx=1
for(i in 1:20){
 for(j in 1:2){
  if (contx%%2==0) 
 { 
  x[contx]<-((2*b)/3)+b*(i-1)
 }
  else 
 {
  x[contx]<-(b/3)+b*(i-1)
 }
 contx=contx+1
}
}
# Ciclo que obtiene la coordenada y de los centroides
conty=1
for(m in 1:10){
 for(n in 1:2){
  if (conty%%2==0) 
 { 
  y[conty]<-((h)/3)+h*(m-1)
 }
  else 
 {
  y[conty]<-(2*h/3)+h*(m-1)
 }
 conty=conty+1
}
}
# Se crea el vector de coordenadas x por elemento
xx=c(x,x,x,x,x,x,x,x,x,x)
# Se crea el vector de coordenadas y por elemento
contyy=1
aux=1
for(i in 1:10){
 for(j in 1:40){
  if(contyy%%2==0){
   yy[contyy]<-y[aux+1]}
  else{
   yy[contyy]<-y[aux]}
  contyy=contyy+1}
 aux=aux+2}
yy=as.vector(yy)
# Se crea un data frame para los centroides
xy=data.frame(xx,yy)
names(xy) <- c("x","y")
# Se realizan las simulaciones no condicionales
vgm1=vgm(1,"Exp",30,anis=c(0,0.3))
g.dummy <- gstat(formula = z~1, locations = ~x+y, dummy = TRUE, beta = 0,model = vgm1, nmax = 20)
yy <- predict(g.dummy, newdata = xy, nsim = 4)
write.csv(yy, file="Anisotropo.txt")
q()
q()
